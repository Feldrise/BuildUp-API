// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type BuildOnStep struct {
	ID               string `json:"id"`
	Name             string `json:"name"`
	Description      string `json:"description"`
	Index            int    `json:"index"`
	ProofType        string `json:"proofType"`
	ProofDescription string `json:"proofDescription"`
}

type ChangesBuidler struct {
	Project map[string]interface{} `json:"project"`
}

type Filter struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type Login struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type NewBuildOn struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Index       int    `json:"index"`
	AnnexeURL   string `json:"annexeUrl"`
	Rewards     string `json:"rewards"`
}

type NewBuildOnStep struct {
	Name             string `json:"name"`
	Description      string `json:"description"`
	Index            int    `json:"index"`
	ProofType        string `json:"proofType"`
	ProofDescription string `json:"proofDescription"`
}

type NewBuilder struct {
	UserID  *string     `json:"userID"`
	Project *NewProject `json:"project"`
}

type NewCoach struct {
	UserID *string `json:"userID"`
}

type NewProject struct {
	Name                  string    `json:"name"`
	Description           string    `json:"description"`
	Team                  string    `json:"team"`
	Categorie             string    `json:"categorie"`
	Keywords              *string   `json:"keywords"`
	LaunchDate            time.Time `json:"launchDate"`
	IsLucrative           bool      `json:"isLucrative"`
	IsOfficialyRegistered bool      `json:"isOfficialyRegistered"`
}

type NewUser struct {
	Email       string      `json:"email"`
	Password    string      `json:"password"`
	FirstName   string      `json:"firstName"`
	LastName    string      `json:"lastName"`
	Description string      `json:"description"`
	Situation   string      `json:"situation"`
	Birthdate   *time.Time  `json:"birthdate"`
	Address     *string     `json:"address"`
	Discord     *string     `json:"discord"`
	Linkedin    *string     `json:"linkedin"`
	Builder     *NewBuilder `json:"builder"`
	Coach       *NewCoach   `json:"coach"`
}

type Role string

const (
	RoleAdmin   Role = "ADMIN"
	RoleBuilder Role = "BUILDER"
	RoleCoach   Role = "COACH"
)

var AllRole = []Role{
	RoleAdmin,
	RoleBuilder,
	RoleCoach,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleBuilder, RoleCoach:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
