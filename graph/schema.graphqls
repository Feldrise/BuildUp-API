directive @needAuthentication on FIELD_DEFINITION
directive @hasRole(role: Role!) on FIELD_DEFINITION

enum Role {
  ADMIN,
  BUILDER,
  COACH
}

scalar Time

###########
## USERS ##
###########

type User {
  id: ID!
  createdAt: Time!
  email: String!
  role: String!
  status: String!
  step: String!
  firstName: String!
  lastName: String!

  description: String!
  situation: String!
  birthdate: Time
  address: String

  # Contact
  discord: String
  linkedin: String

  builder: Builder
  coach: Coach
}

input NewUser {
  email: String!
  password: String!
  firstName: String!
  lastName: String!

  description: String!
  situation: String!
  birthdate: Time
  address: String

  # Contact
  discord: String
  linkedin: String

  builder: NewBuilder
  coach: NewCoach
}

input ChangesUser {
  email: String
  password: String
  firstName: String
  lastName: String
  status: String
  step: String

  description: String
  situation: String
  birthdate: Time
  address: String

  # Contact
  discord: String
  linkedin: String

  builder: ChangesBuidler
}

input Login {
  email: String!
  password: String!
}

#############
## BUILDER ##
#############

type Builder {
  id: ID!

  candidatingDate: Time!

  project: Project!

  coach: User
}

input NewBuilder {
  userID: ID
  project: NewProject!
}

input ChangesBuidler {
  project: ChangesProject
}

###########
## COACH ##
###########

type Coach {
  id: ID!

  candidatingDate: Time!

  builders: [User!]!
}

input NewCoach {
  userID: ID
}

##############
## PROJECTS ##
##############

type Project {
  id: ID!
  
  # Basic informations
  name: String!
  description: String!
  team: String!

  # Complementary informations
  categorie: String!
  keywords: String!
  launchDate: Time!
  isLucrative: Boolean!
  isOfficialyRegistered: Boolean!
}

input NewProject {
  # Basic informations
  name: String!
  description: String!
  team: String!

  # Complementary informations
  categorie: String!
  keywords: String
  launchDate: Time!
  isLucrative: Boolean!
  isOfficialyRegistered: Boolean!
}

input ChangesProject {
    # Basic informations
  name: String
  description: String
  team: String

  # Complementary informations
  categorie: String
  keywords: String
  launchDate: Time
  isLucrative: Boolean
  isOfficialyRegistered: Boolean
}

##############
## BUILDONS ##
##############

# BuildOns

type BuildOn {
  id: ID!

  name: String!
  description: String!
  index: Int!
  annexeUrl: String!
  rewards: String!

  steps: [BuildOnStep!]!
}

input NewBuildOn {
  name: String!
  description: String!
  index: Int!
  annexeUrl: String!
  rewards: String!
}

input ChangesBuildOn {
  name: String
  description: String
  index: Int
  annexeUrl: String
  rewards: String
}


# Steps
type BuildOnStep {
  id: ID!

  name: String!
  description: String!
  index: Int!
  proofType: String! # TODO: document
  proofDescription: String!
}

input NewBuildOnStep {
  name: String!
  description: String!
  index: Int!
  proofType: String!
  proofDescription: String!
}

input ChangesBuildOnStep {
  name: String
  description: String
  index: Int
  proofType: String
  proofDescription: String
}


#############
## FILTERS ##
#############

input Filter {
  key: String!
  value: String!
}

type Query {
  # USERS
  users(filters: [Filter!]): [User!]! @needAuthentication
  user(id: ID): User! @needAuthentication

  # BUILDONS
  buildons(filters: [Filter!]): [BuildOn!]! @needAuthentication
}

type Mutation {
  # USERS
  createUser(input: NewUser!): User!
  updateUser(id: ID!, changes: ChangesUser!): User! @needAuthentication
  login(input: Login!): String!

  # BUILDONS
  createBuildOn(input: NewBuildOn!): BuildOn! @hasRole(role: ADMIN)
  updateBuildOn(id: ID!, changes: ChangesBuildOn!): BuildOn! @hasRole(role: ADMIN)

  # BUILDON STEPS
  createBuildOnStep(buildOnID: ID!, input: NewBuildOnStep!): BuildOnStep! @hasRole(role: ADMIN)
  updateBuildOnStep(id: ID!, changes: ChangesBuildOnStep!): BuildOnStep! @hasRole(role: ADMIN)
}
